<#
  // Copyright (c) Knowledge & Experience. All rights reserved.
  // Licensed under the MIT license. See LICENSE file in the project root for full license information.
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.Azure.DigitalTwins.Parser" #>
<#@ import namespace="Kae.IoT.PnP.Generator.Csharp" #>
<#@ import namespace="Kae.IoT.PnP.Generator" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: <#= Version #>
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace <#= nameSpace #>
{
    class <#= d2cDataTypeName #> : Kae.IoT.Framework.D2CMessage
    {
<# 
    indent = "        ";
    foreach (var telemetryInfo in dtTelemetries.Values) {
        var telemetry = telemetryInfo.Info;
        var fieldDecl = CreateFieldDecl(indentUnit, indent, telemetry.Name, telemetry.Schema);
        var fieldDeclContent = fieldDecl.TransformText(); #>
<#= fieldDeclContent #>
<#  }
#>

        public override <#= d2cDataTypeNameForDeserialize #> Deserialize(string json)
        {
            return (D2CData) Newtonsoft.Json.JsonConvert.DeserializeObject(json, typeof(D2CData));
        }

        public override string Serialize()
        {
            var content = Newtonsoft.Json.JsonConvert.SerializeObject(this);
            return content;
        }
    }

    class <#= dpDataTypeName #> : Kae.IoT.Framework.IoTData
    {
<#
    foreach (var propInfo in dtDesiredProperties.Values) {
        var prop = propInfo.Info;
        var fieldDecl = CreateFieldDecl(indentUnit, indent, prop.Name, prop.Schema);
        var fieldDeclContent = fieldDecl.TransformText(); #>
<#= fieldDeclContent #>
<#  }
#>

        public override <#= dpDataTypeNameForDeserialize #> Deserialize(string json)
        {
            return (AppDTDesiredProperties) Newtonsoft.Json.JsonConvert.DeserializeObject(json, typeof(AppDTDesiredProperties));
        }

        public override string Serialize()
        {
            var content = Newtonsoft.Json.JsonConvert.SerializeObject(this);
            return content;
        }
    }

    class <#= rpDataTypeName #> : Kae.IoT.Framework.IoTData
    {
<#
    foreach (var propInfo in dtReporedProperties.Values) {
        var prop = propInfo.Info;
        var fieldDecl = CreateFieldDecl(indentUnit, indent, prop.Name, prop.Schema);
        var fieldDeclContent = fieldDecl.TransformText(); #>
<#= fieldDeclContent #>
<#  }
#>

        public override <#= rpDataTypeNameForDeserialize #> Deserialize(string json)
        {
            return (AppDTReporetedProperties) Newtonsoft.Json.JsonConvert.DeserializeObject(json, typeof(AppDTReporetedProperties));
        }

        public override string Serialize()
        {
            var content = Newtonsoft.Json.JsonConvert.SerializeObject(this);
            return content;
        }
    }

<#
    foreach (var dmsyncInfo in dtSyncDirectMethods.Values)
    {
        var dmsync = dmsyncInfo.Info;
        var parentTypeName = $"Command_{dmsync.Name}";
        var requestPayload = dmsync.Request;
        var responsePayload = dmsync.Response;
        string genRequest = null;
        string genResponse = null;
        if (requestPayload is not null){
            string typeName = $"{GetMethodName(dmsync)}_Request_${requestPayload.Name}";
            genRequest = TransformCommandPayload(requestPayload, typeName);
        }
        if (responsePayload is not null)
        {
            string typeName = $"{GetMethodName(dmsync)}_Response_${responsePayload.Name}";
            genResponse = TransformCommandPayload(requestPayload, typeName);
        }
        if ((!string.IsNullOrEmpty(genRequest)) || (!string.IsNullOrEmpty(genResponse)))
        { #>
public class <#= parentTypeName #> {
<#          if (!string.IsNullOrEmpty(genRequest))
            { #>
<#= genRequest #>          
<#          }
            if (!string.IsNullOrEmpty(genResponse))
            { #>
<#= genResponse #>
<#          } #>
}
<#      }
    }
#>
}
